// source: common/trade.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_enum_pb = require('../common/enum_pb.js');
goog.object.extend(proto, common_enum_pb);
goog.exportSymbol('proto.common.trade.TeamOrderDtoPb', null, global);
goog.exportSymbol('proto.common.trade.TeamOrderDtoPb.ItemDtoPb', null, global);
goog.exportSymbol('proto.common.trade.TeamOrderDtoPb.OrderProductAttr', null, global);
goog.exportSymbol('proto.common.trade.TradeDTOPb', null, global);
goog.exportSymbol('proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb', null, global);
goog.exportSymbol('proto.common.trade.TradeDTOPb.OrderProductDTOPb', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.trade.TradeDTOPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.trade.TradeDTOPb.repeatedFields_, null);
};
goog.inherits(proto.common.trade.TradeDTOPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.trade.TradeDTOPb.displayName = 'proto.common.trade.TradeDTOPb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.repeatedFields_, null);
};
goog.inherits(proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.displayName = 'proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.trade.TradeDTOPb.OrderProductDTOPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.trade.TradeDTOPb.OrderProductDTOPb.displayName = 'proto.common.trade.TradeDTOPb.OrderProductDTOPb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.trade.TeamOrderDtoPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.trade.TeamOrderDtoPb.repeatedFields_, null);
};
goog.inherits(proto.common.trade.TeamOrderDtoPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.trade.TeamOrderDtoPb.displayName = 'proto.common.trade.TeamOrderDtoPb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.trade.TeamOrderDtoPb.ItemDtoPb.repeatedFields_, null);
};
goog.inherits(proto.common.trade.TeamOrderDtoPb.ItemDtoPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.trade.TeamOrderDtoPb.ItemDtoPb.displayName = 'proto.common.trade.TeamOrderDtoPb.ItemDtoPb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.trade.TeamOrderDtoPb.OrderProductAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.trade.TeamOrderDtoPb.OrderProductAttr.displayName = 'proto.common.trade.TeamOrderDtoPb.OrderProductAttr';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.trade.TradeDTOPb.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.trade.TradeDTOPb.prototype.toObject = function(opt_includeInstance) {
  return proto.common.trade.TradeDTOPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.trade.TradeDTOPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TradeDTOPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inviterId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    countryCode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    vPath: jspb.Message.getFieldWithDefault(msg, 6, ""),
    orderAfterSalesDto: (f = msg.getOrderAfterSalesDto()) && proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.toObject(includeInstance, f),
    orderProductList: jspb.Message.toObjectList(msg.getOrderProductList(),
    proto.common.trade.TradeDTOPb.OrderProductDTOPb.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.trade.TradeDTOPb}
 */
proto.common.trade.TradeDTOPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.trade.TradeDTOPb;
  return proto.common.trade.TradeDTOPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.trade.TradeDTOPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.trade.TradeDTOPb}
 */
proto.common.trade.TradeDTOPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInviterId(value);
      break;
    case 4:
      var value = /** @type {!proto.common.enum.OrderEnum.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVPath(value);
      break;
    case 7:
      var value = new proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb;
      reader.readMessage(value,proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.deserializeBinaryFromReader);
      msg.setOrderAfterSalesDto(value);
      break;
    case 8:
      var value = new proto.common.trade.TradeDTOPb.OrderProductDTOPb;
      reader.readMessage(value,proto.common.trade.TradeDTOPb.OrderProductDTOPb.deserializeBinaryFromReader);
      msg.addOrderProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.trade.TradeDTOPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.trade.TradeDTOPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.trade.TradeDTOPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TradeDTOPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getInviterId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVPath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOrderAfterSalesDto();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.serializeBinaryToWriter
    );
  }
  f = message.getOrderProductList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.common.trade.TradeDTOPb.OrderProductDTOPb.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.toObject = function(opt_includeInstance) {
  return proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    skuIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb}
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb;
  return proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb}
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setSkuIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSkuIdList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 order_id = 1;
 * @return {number}
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.setOrderId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int64 sku_id = 2;
 * @return {!Array<number>}
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.getSkuIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.setSkuIdList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.addSkuId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb.prototype.clearSkuIdList = function() {
  this.setSkuIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.toObject = function(opt_includeInstance) {
  return proto.common.trade.TradeDTOPb.OrderProductDTOPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.trade.TradeDTOPb.OrderProductDTOPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    productId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    productName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    categoryName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    actualPrice: jspb.Message.getFieldWithDefault(msg, 5, ""),
    skuId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    commissionRate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    liveOrderRate1: jspb.Message.getFieldWithDefault(msg, 8, ""),
    liveOrderRate2: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.trade.TradeDTOPb.OrderProductDTOPb}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.trade.TradeDTOPb.OrderProductDTOPb;
  return proto.common.trade.TradeDTOPb.OrderProductDTOPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.trade.TradeDTOPb.OrderProductDTOPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.trade.TradeDTOPb.OrderProductDTOPb}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProductId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActualPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSkuId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommissionRate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiveOrderRate1(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiveOrderRate2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.trade.TradeDTOPb.OrderProductDTOPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.trade.TradeDTOPb.OrderProductDTOPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getProductName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCategoryName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActualPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSkuId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCommissionRate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLiveOrderRate1();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLiveOrderRate2();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 product_id = 1;
 * @return {number}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getProductId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setProductId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string product_name = 3;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getProductName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setProductName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string category_name = 4;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getCategoryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setCategoryName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string actual_price = 5;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getActualPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setActualPrice = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 sku_id = 6;
 * @return {number}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getSkuId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setSkuId = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string commission_rate = 7;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getCommissionRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setCommissionRate = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string live_order_rate1 = 8;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getLiveOrderRate1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setLiveOrderRate1 = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string live_order_rate2 = 9;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.getLiveOrderRate2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.OrderProductDTOPb.prototype.setLiveOrderRate2 = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int64 order_id = 1;
 * @return {number}
 */
proto.common.trade.TradeDTOPb.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.common.trade.TradeDTOPb.prototype.setOrderId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_id = 2;
 * @return {number}
 */
proto.common.trade.TradeDTOPb.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.common.trade.TradeDTOPb.prototype.setUserId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 inviter_id = 3;
 * @return {number}
 */
proto.common.trade.TradeDTOPb.prototype.getInviterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.common.trade.TradeDTOPb.prototype.setInviterId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional common.enum.OrderEnum.OrderType order_type = 4;
 * @return {!proto.common.enum.OrderEnum.OrderType}
 */
proto.common.trade.TradeDTOPb.prototype.getOrderType = function() {
  return /** @type {!proto.common.enum.OrderEnum.OrderType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.common.enum.OrderEnum.OrderType} value */
proto.common.trade.TradeDTOPb.prototype.setOrderType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string country_code = 5;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.prototype.setCountryCode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string v_path = 6;
 * @return {string}
 */
proto.common.trade.TradeDTOPb.prototype.getVPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.common.trade.TradeDTOPb.prototype.setVPath = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional OrderAfterSalesDTOPb order_after_sales_dto = 7;
 * @return {?proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb}
 */
proto.common.trade.TradeDTOPb.prototype.getOrderAfterSalesDto = function() {
  return /** @type{?proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb} */ (
    jspb.Message.getWrapperField(this, proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb, 7));
};


/** @param {?proto.common.trade.TradeDTOPb.OrderAfterSalesDTOPb|undefined} value */
proto.common.trade.TradeDTOPb.prototype.setOrderAfterSalesDto = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.common.trade.TradeDTOPb.prototype.clearOrderAfterSalesDto = function() {
  this.setOrderAfterSalesDto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.trade.TradeDTOPb.prototype.hasOrderAfterSalesDto = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated OrderProductDTOPb order_product = 8;
 * @return {!Array<!proto.common.trade.TradeDTOPb.OrderProductDTOPb>}
 */
proto.common.trade.TradeDTOPb.prototype.getOrderProductList = function() {
  return /** @type{!Array<!proto.common.trade.TradeDTOPb.OrderProductDTOPb>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.trade.TradeDTOPb.OrderProductDTOPb, 8));
};


/** @param {!Array<!proto.common.trade.TradeDTOPb.OrderProductDTOPb>} value */
proto.common.trade.TradeDTOPb.prototype.setOrderProductList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.common.trade.TradeDTOPb.OrderProductDTOPb=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.trade.TradeDTOPb.OrderProductDTOPb}
 */
proto.common.trade.TradeDTOPb.prototype.addOrderProduct = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.common.trade.TradeDTOPb.OrderProductDTOPb, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.common.trade.TradeDTOPb.prototype.clearOrderProductList = function() {
  this.setOrderProductList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.trade.TeamOrderDtoPb.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.trade.TeamOrderDtoPb.prototype.toObject = function(opt_includeInstance) {
  return proto.common.trade.TeamOrderDtoPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.trade.TeamOrderDtoPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TeamOrderDtoPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createTime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderStatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    payAmount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    totalFreight: jspb.Message.getFieldWithDefault(msg, 5, ""),
    countryCode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.common.trade.TeamOrderDtoPb.ItemDtoPb.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.trade.TeamOrderDtoPb}
 */
proto.common.trade.TeamOrderDtoPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.trade.TeamOrderDtoPb;
  return proto.common.trade.TeamOrderDtoPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.trade.TeamOrderDtoPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.trade.TeamOrderDtoPb}
 */
proto.common.trade.TeamOrderDtoPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateTime(value);
      break;
    case 3:
      var value = /** @type {!proto.common.enum.OrderEnum.OrderStatus} */ (reader.readEnum());
      msg.setOrderStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalFreight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 7:
      var value = new proto.common.trade.TeamOrderDtoPb.ItemDtoPb;
      reader.readMessage(value,proto.common.trade.TeamOrderDtoPb.ItemDtoPb.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.trade.TeamOrderDtoPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.trade.TeamOrderDtoPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.trade.TeamOrderDtoPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TeamOrderDtoPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreateTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPayAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTotalFreight();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.common.trade.TeamOrderDtoPb.ItemDtoPb.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.toObject = function(opt_includeInstance) {
  return proto.common.trade.TeamOrderDtoPb.ItemDtoPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.trade.TeamOrderDtoPb.ItemDtoPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    productId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    productName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    price: jspb.Message.getFieldWithDefault(msg, 5, ""),
    skuCover: jspb.Message.getFieldWithDefault(msg, 6, ""),
    attrList: jspb.Message.toObjectList(msg.getAttrList(),
    proto.common.trade.TeamOrderDtoPb.OrderProductAttr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.trade.TeamOrderDtoPb.ItemDtoPb}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.trade.TeamOrderDtoPb.ItemDtoPb;
  return proto.common.trade.TeamOrderDtoPb.ItemDtoPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.trade.TeamOrderDtoPb.ItemDtoPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.trade.TeamOrderDtoPb.ItemDtoPb}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkuCover(value);
      break;
    case 7:
      var value = new proto.common.trade.TeamOrderDtoPb.OrderProductAttr;
      reader.readMessage(value,proto.common.trade.TeamOrderDtoPb.OrderProductAttr.deserializeBinaryFromReader);
      msg.addAttr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.trade.TeamOrderDtoPb.ItemDtoPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.trade.TeamOrderDtoPb.ItemDtoPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProductId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSkuCover();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAttrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.common.trade.TeamOrderDtoPb.OrderProductAttr.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 order_id = 1;
 * @return {number}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.setOrderId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string product_id = 2;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.getProductId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.setProductId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string product_name = 3;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.getProductName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.setProductName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string price = 5;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.setPrice = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string sku_cover = 6;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.getSkuCover = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.setSkuCover = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated OrderProductAttr attr = 7;
 * @return {!Array<!proto.common.trade.TeamOrderDtoPb.OrderProductAttr>}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.getAttrList = function() {
  return /** @type{!Array<!proto.common.trade.TeamOrderDtoPb.OrderProductAttr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.trade.TeamOrderDtoPb.OrderProductAttr, 7));
};


/** @param {!Array<!proto.common.trade.TeamOrderDtoPb.OrderProductAttr>} value */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.setAttrList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.common.trade.TeamOrderDtoPb.OrderProductAttr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.trade.TeamOrderDtoPb.OrderProductAttr}
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.addAttr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.common.trade.TeamOrderDtoPb.OrderProductAttr, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.common.trade.TeamOrderDtoPb.ItemDtoPb.prototype.clearAttrList = function() {
  this.setAttrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.common.trade.TeamOrderDtoPb.OrderProductAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.trade.TeamOrderDtoPb.OrderProductAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attrName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valueId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    valueName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.trade.TeamOrderDtoPb.OrderProductAttr}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.trade.TeamOrderDtoPb.OrderProductAttr;
  return proto.common.trade.TeamOrderDtoPb.OrderProductAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.trade.TeamOrderDtoPb.OrderProductAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.trade.TeamOrderDtoPb.OrderProductAttr}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAttrId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttrName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValueId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.trade.TeamOrderDtoPb.OrderProductAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.trade.TeamOrderDtoPb.OrderProductAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttrId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAttrName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValueId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getValueName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 attr_id = 1;
 * @return {number}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.getAttrId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.setAttrId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string attr_name = 2;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.getAttrName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.setAttrName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 value_id = 3;
 * @return {number}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.getValueId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.setValueId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string value_name = 4;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.getValueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.OrderProductAttr.prototype.setValueName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.prototype.setOrderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string create_time = 2;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.prototype.getCreateTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.prototype.setCreateTime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional common.enum.OrderEnum.OrderStatus order_status = 3;
 * @return {!proto.common.enum.OrderEnum.OrderStatus}
 */
proto.common.trade.TeamOrderDtoPb.prototype.getOrderStatus = function() {
  return /** @type {!proto.common.enum.OrderEnum.OrderStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.common.enum.OrderEnum.OrderStatus} value */
proto.common.trade.TeamOrderDtoPb.prototype.setOrderStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string pay_amount = 4;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.prototype.getPayAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.prototype.setPayAmount = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string total_freight = 5;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.prototype.getTotalFreight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.prototype.setTotalFreight = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country_code = 6;
 * @return {string}
 */
proto.common.trade.TeamOrderDtoPb.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.common.trade.TeamOrderDtoPb.prototype.setCountryCode = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated ItemDtoPb item = 7;
 * @return {!Array<!proto.common.trade.TeamOrderDtoPb.ItemDtoPb>}
 */
proto.common.trade.TeamOrderDtoPb.prototype.getItemList = function() {
  return /** @type{!Array<!proto.common.trade.TeamOrderDtoPb.ItemDtoPb>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.trade.TeamOrderDtoPb.ItemDtoPb, 7));
};


/** @param {!Array<!proto.common.trade.TeamOrderDtoPb.ItemDtoPb>} value */
proto.common.trade.TeamOrderDtoPb.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.common.trade.TeamOrderDtoPb.ItemDtoPb=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.trade.TeamOrderDtoPb.ItemDtoPb}
 */
proto.common.trade.TeamOrderDtoPb.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.common.trade.TeamOrderDtoPb.ItemDtoPb, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.common.trade.TeamOrderDtoPb.prototype.clearItemList = function() {
  this.setItemList([]);
};


goog.object.extend(exports, proto.common.trade);
