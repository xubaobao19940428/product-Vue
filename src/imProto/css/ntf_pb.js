// source: css/ntf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var css_enum_pb = require('../css/enum_pb.js');
goog.object.extend(proto, css_enum_pb);
var css_msg_pb = require('../css/msg_pb.js');
goog.object.extend(proto, css_msg_pb);
goog.exportSymbol('proto.css.ntf.CallMsgNotification', null, global);
goog.exportSymbol('proto.css.ntf.CarbonMsgNotification', null, global);
goog.exportSymbol('proto.css.ntf.ENtfType', null, global);
goog.exportSymbol('proto.css.ntf.FriendUpdateNotification', null, global);
goog.exportSymbol('proto.css.ntf.KickNotification', null, global);
goog.exportSymbol('proto.css.ntf.NewMsgNotification', null, global);
goog.exportSymbol('proto.css.ntf.RetractNotification', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.ntf.NewMsgNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.ntf.NewMsgNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.ntf.NewMsgNotification.displayName = 'proto.css.ntf.NewMsgNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.ntf.CarbonMsgNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.ntf.CarbonMsgNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.ntf.CarbonMsgNotification.displayName = 'proto.css.ntf.CarbonMsgNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.ntf.CallMsgNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.ntf.CallMsgNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.ntf.CallMsgNotification.displayName = 'proto.css.ntf.CallMsgNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.ntf.KickNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.ntf.KickNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.ntf.KickNotification.displayName = 'proto.css.ntf.KickNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.ntf.FriendUpdateNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.ntf.FriendUpdateNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.ntf.FriendUpdateNotification.displayName = 'proto.css.ntf.FriendUpdateNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.ntf.RetractNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.ntf.RetractNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.ntf.RetractNotification.displayName = 'proto.css.ntf.RetractNotification';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.ntf.NewMsgNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.css.ntf.NewMsgNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.ntf.NewMsgNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.NewMsgNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.ntf.NewMsgNotification}
 */
proto.css.ntf.NewMsgNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.ntf.NewMsgNotification;
  return proto.css.ntf.NewMsgNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.ntf.NewMsgNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.ntf.NewMsgNotification}
 */
proto.css.ntf.NewMsgNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.ntf.NewMsgNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.ntf.NewMsgNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.ntf.NewMsgNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.NewMsgNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.css.ntf.NewMsgNotification.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.ntf.NewMsgNotification.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.ntf.CarbonMsgNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.css.ntf.CarbonMsgNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.ntf.CarbonMsgNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.CarbonMsgNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    senderUsername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    senderClientType: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.ntf.CarbonMsgNotification}
 */
proto.css.ntf.CarbonMsgNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.ntf.CarbonMsgNotification;
  return proto.css.ntf.CarbonMsgNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.ntf.CarbonMsgNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.ntf.CarbonMsgNotification}
 */
proto.css.ntf.CarbonMsgNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderUsername(value);
      break;
    case 4:
      var value = /** @type {!proto.css.enum.EClientType} */ (reader.readEnum());
      msg.setSenderClientType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.ntf.CarbonMsgNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.ntf.CarbonMsgNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.ntf.CarbonMsgNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.CarbonMsgNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSenderUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSenderClientType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.css.ntf.CarbonMsgNotification.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.ntf.CarbonMsgNotification.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string appkey = 2;
 * @return {string}
 */
proto.css.ntf.CarbonMsgNotification.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.ntf.CarbonMsgNotification.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sender_username = 3;
 * @return {string}
 */
proto.css.ntf.CarbonMsgNotification.prototype.getSenderUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.ntf.CarbonMsgNotification.prototype.setSenderUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional css.enum.EClientType sender_client_type = 4;
 * @return {!proto.css.enum.EClientType}
 */
proto.css.ntf.CarbonMsgNotification.prototype.getSenderClientType = function() {
  return /** @type {!proto.css.enum.EClientType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.css.enum.EClientType} value */
proto.css.ntf.CarbonMsgNotification.prototype.setSenderClientType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.ntf.CallMsgNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.css.ntf.CallMsgNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.ntf.CallMsgNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.CallMsgNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    callMsgType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.ntf.CallMsgNotification}
 */
proto.css.ntf.CallMsgNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.ntf.CallMsgNotification;
  return proto.css.ntf.CallMsgNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.ntf.CallMsgNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.ntf.CallMsgNotification}
 */
proto.css.ntf.CallMsgNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.enum.ECallMsgType} */ (reader.readEnum());
      msg.setCallMsgType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.ntf.CallMsgNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.ntf.CallMsgNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.ntf.CallMsgNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.CallMsgNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional css.enum.ECallMsgType call_msg_type = 1;
 * @return {!proto.css.enum.ECallMsgType}
 */
proto.css.ntf.CallMsgNotification.prototype.getCallMsgType = function() {
  return /** @type {!proto.css.enum.ECallMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.enum.ECallMsgType} value */
proto.css.ntf.CallMsgNotification.prototype.setCallMsgType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.css.ntf.CallMsgNotification.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.ntf.CallMsgNotification.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.ntf.KickNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.css.ntf.KickNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.ntf.KickNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.KickNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginClientType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.ntf.KickNotification}
 */
proto.css.ntf.KickNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.ntf.KickNotification;
  return proto.css.ntf.KickNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.ntf.KickNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.ntf.KickNotification}
 */
proto.css.ntf.KickNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.enum.EClientType} */ (reader.readEnum());
      msg.setLoginClientType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.ntf.KickNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.ntf.KickNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.ntf.KickNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.KickNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginClientType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.enum.EClientType login_client_type = 1;
 * @return {!proto.css.enum.EClientType}
 */
proto.css.ntf.KickNotification.prototype.getLoginClientType = function() {
  return /** @type {!proto.css.enum.EClientType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.enum.EClientType} value */
proto.css.ntf.KickNotification.prototype.setLoginClientType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.ntf.FriendUpdateNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.css.ntf.FriendUpdateNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.ntf.FriendUpdateNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.FriendUpdateNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.ntf.FriendUpdateNotification}
 */
proto.css.ntf.FriendUpdateNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.ntf.FriendUpdateNotification;
  return proto.css.ntf.FriendUpdateNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.ntf.FriendUpdateNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.ntf.FriendUpdateNotification}
 */
proto.css.ntf.FriendUpdateNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.ntf.FriendUpdateNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.ntf.FriendUpdateNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.ntf.FriendUpdateNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.FriendUpdateNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.css.ntf.FriendUpdateNotification.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.ntf.FriendUpdateNotification.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.ntf.RetractNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.css.ntf.RetractNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.ntf.RetractNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.RetractNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    appkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msgType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromUsername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 4, ""),
    retractGuid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.ntf.RetractNotification}
 */
proto.css.ntf.RetractNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.ntf.RetractNotification;
  return proto.css.ntf.RetractNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.ntf.RetractNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.ntf.RetractNotification}
 */
proto.css.ntf.RetractNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 2:
      var value = /** @type {!proto.css.msg.EMsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRetractGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.ntf.RetractNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.ntf.RetractNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.ntf.RetractNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.ntf.RetractNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRetractGuid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string appkey = 1;
 * @return {string}
 */
proto.css.ntf.RetractNotification.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.ntf.RetractNotification.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional css.msg.EMsgType msg_type = 2;
 * @return {!proto.css.msg.EMsgType}
 */
proto.css.ntf.RetractNotification.prototype.getMsgType = function() {
  return /** @type {!proto.css.msg.EMsgType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.css.msg.EMsgType} value */
proto.css.ntf.RetractNotification.prototype.setMsgType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string from_username = 3;
 * @return {string}
 */
proto.css.ntf.RetractNotification.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.ntf.RetractNotification.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string uri = 4;
 * @return {string}
 */
proto.css.ntf.RetractNotification.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.ntf.RetractNotification.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 retract_guid = 5;
 * @return {number}
 */
proto.css.ntf.RetractNotification.prototype.getRetractGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.css.ntf.RetractNotification.prototype.setRetractGuid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.css.ntf.ENtfType = {
  LOGIN_RESPONSE: 0,
  LOGOUT_RESPONSE: 1,
  KICK_NOTIFICATION: 2,
  STREAM_INIT_RESPONSE: 3,
  PING_RESPONSE: 4,
  NEW_MSG: 10,
  FRIEND_UPDATE_NOTIFICATION: 11,
  RETRACT_NOTIFICATION: 12,
  CARBON_MSG: 13,
  CALL_MSG: 14,
  GROUP_LIST_UPDATE_NOTIFICATION: 15,
  CUSTOM_MSG: 16
};

goog.object.extend(exports, proto.css.ntf);
