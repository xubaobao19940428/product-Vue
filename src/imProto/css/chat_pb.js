// source: css/chat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var css_msg_pb = require('../css/msg_pb.js');
goog.object.extend(proto, css_msg_pb);
var css_errcode_pb = require('../css/errcode_pb.js');
goog.object.extend(proto, css_errcode_pb);
var css_enum_pb = require('../css/enum_pb.js');
goog.object.extend(proto, css_enum_pb);
var css_base_pb = require('../css/base_pb.js');
goog.object.extend(proto, css_base_pb);
var common_enum_pb = require('../common/enum_pb.js');
goog.object.extend(proto, common_enum_pb);
var common_base_pb = require('../common/base_pb.js');
goog.object.extend(proto, common_base_pb);
goog.exportSymbol('proto.css.chat.CSStopServiceReq', null, global);
goog.exportSymbol('proto.css.chat.CSStopServiceResp', null, global);
goog.exportSymbol('proto.css.chat.CType', null, global);
goog.exportSymbol('proto.css.chat.ChatHistoryMessageGetRequest', null, global);
goog.exportSymbol('proto.css.chat.ChatMessage', null, global);
goog.exportSymbol('proto.css.chat.ChatMessageRemoveRequest', null, global);
goog.exportSymbol('proto.css.chat.ChatMessageRequest', null, global);
goog.exportSymbol('proto.css.chat.ChatMessageResponse', null, global);
goog.exportSymbol('proto.css.chat.ChatMessageStoreRequest', null, global);
goog.exportSymbol('proto.css.chat.ChatMessageStoreResponse', null, global);
goog.exportSymbol('proto.css.chat.CheckBundleExistsReq', null, global);
goog.exportSymbol('proto.css.chat.CheckBundleExistsResp', null, global);
goog.exportSymbol('proto.css.chat.CheckBundleOverdueReq', null, global);
goog.exportSymbol('proto.css.chat.CheckBundleOverdueResp', null, global);
goog.exportSymbol('proto.css.chat.CustomerServiceReq', null, global);
goog.exportSymbol('proto.css.chat.CustomerServiceResp', null, global);
goog.exportSymbol('proto.css.chat.CustomerServiceSignInReq', null, global);
goog.exportSymbol('proto.css.chat.CustomerServiceSignInResp', null, global);
goog.exportSymbol('proto.css.chat.CustomerServiceSignOutReq', null, global);
goog.exportSymbol('proto.css.chat.CustomerServiceSingOutResp', null, global);
goog.exportSymbol('proto.css.chat.END_TYPE', null, global);
goog.exportSymbol('proto.css.chat.FAQListItem', null, global);
goog.exportSymbol('proto.css.chat.FAQListReq', null, global);
goog.exportSymbol('proto.css.chat.FAQListResp', null, global);
goog.exportSymbol('proto.css.chat.GetBlackListByQueryWithPageReq', null, global);
goog.exportSymbol('proto.css.chat.GetBlackListByQueryWithPageResp', null, global);
goog.exportSymbol('proto.css.chat.GetHistoryCustomMsgBatchRequest', null, global);
goog.exportSymbol('proto.css.chat.GetHistoryCustomMsgBatchResponse', null, global);
goog.exportSymbol('proto.css.chat.GetSessionWithPageReq', null, global);
goog.exportSymbol('proto.css.chat.GetSessionWithPageResp', null, global);
goog.exportSymbol('proto.css.chat.MessageRemoveResponse', null, global);
goog.exportSymbol('proto.css.chat.MessageSyncRequest', null, global);
goog.exportSymbol('proto.css.chat.MsgGetResponse', null, global);
goog.exportSymbol('proto.css.chat.PrivateMessageRequest', null, global);
goog.exportSymbol('proto.css.chat.PullUserOutOfBlackListReq', null, global);
goog.exportSymbol('proto.css.chat.PullUserOutOfBlackListResp', null, global);
goog.exportSymbol('proto.css.chat.PullUserToBlackListReq', null, global);
goog.exportSymbol('proto.css.chat.PullUserToBlackListResp', null, global);
goog.exportSymbol('proto.css.chat.SendPointMessageReq', null, global);
goog.exportSymbol('proto.css.chat.SendPointMessageResp', null, global);
goog.exportSymbol('proto.css.chat.ServiceStatus', null, global);
goog.exportSymbol('proto.css.chat.SessionItem', null, global);
goog.exportSymbol('proto.css.chat.SetServiceStatusReq', null, global);
goog.exportSymbol('proto.css.chat.SetServiceStatusResp', null, global);
goog.exportSymbol('proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq', null, global);
goog.exportSymbol('proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp', null, global);
goog.exportSymbol('proto.css.chat.SingleGetHistoryCustomMsgRequest', null, global);
goog.exportSymbol('proto.css.chat.SingleGetHistoryCustomMsgResponse', null, global);
goog.exportSymbol('proto.css.chat.SubmitEvaluationReq', null, global);
goog.exportSymbol('proto.css.chat.SubmitEvaluationResp', null, global);
goog.exportSymbol('proto.css.chat.SyncChatSessionReadRequest', null, global);
goog.exportSymbol('proto.css.chat.SyncChatSessionReadResponse', null, global);
goog.exportSymbol('proto.css.chat.SyncSendGUIDRequest', null, global);
goog.exportSymbol('proto.css.chat.SyncSendGUIDResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.ChatMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.ChatMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.ChatMessageRequest.displayName = 'proto.css.chat.ChatMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.ChatMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.ChatMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.ChatMessageResponse.displayName = 'proto.css.chat.ChatMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.ChatMessage.displayName = 'proto.css.chat.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SendPointMessageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.css.chat.SendPointMessageReq.repeatedFields_, null);
};
goog.inherits(proto.css.chat.SendPointMessageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SendPointMessageReq.displayName = 'proto.css.chat.SendPointMessageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SendPointMessageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SendPointMessageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SendPointMessageResp.displayName = 'proto.css.chat.SendPointMessageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.PrivateMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.PrivateMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.PrivateMessageRequest.displayName = 'proto.css.chat.PrivateMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.ChatMessageStoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.ChatMessageStoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.ChatMessageStoreRequest.displayName = 'proto.css.chat.ChatMessageStoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.ChatMessageStoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.ChatMessageStoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.ChatMessageStoreResponse.displayName = 'proto.css.chat.ChatMessageStoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.ChatHistoryMessageGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.ChatHistoryMessageGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.ChatHistoryMessageGetRequest.displayName = 'proto.css.chat.ChatHistoryMessageGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.GetHistoryCustomMsgBatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.GetHistoryCustomMsgBatchRequest.displayName = 'proto.css.chat.GetHistoryCustomMsgBatchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.css.chat.GetHistoryCustomMsgBatchResponse.repeatedFields_, null);
};
goog.inherits(proto.css.chat.GetHistoryCustomMsgBatchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.GetHistoryCustomMsgBatchResponse.displayName = 'proto.css.chat.GetHistoryCustomMsgBatchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SingleGetHistoryCustomMsgRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SingleGetHistoryCustomMsgRequest.displayName = 'proto.css.chat.SingleGetHistoryCustomMsgRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SingleGetHistoryCustomMsgResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SingleGetHistoryCustomMsgResponse.displayName = 'proto.css.chat.SingleGetHistoryCustomMsgResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.MessageSyncRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.MessageSyncRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.MessageSyncRequest.displayName = 'proto.css.chat.MessageSyncRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.MsgGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.css.chat.MsgGetResponse.repeatedFields_, null);
};
goog.inherits(proto.css.chat.MsgGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.MsgGetResponse.displayName = 'proto.css.chat.MsgGetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SyncChatSessionReadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SyncChatSessionReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SyncChatSessionReadRequest.displayName = 'proto.css.chat.SyncChatSessionReadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SyncChatSessionReadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SyncChatSessionReadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SyncChatSessionReadResponse.displayName = 'proto.css.chat.SyncChatSessionReadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.ChatMessageRemoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.css.chat.ChatMessageRemoveRequest.repeatedFields_, null);
};
goog.inherits(proto.css.chat.ChatMessageRemoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.ChatMessageRemoveRequest.displayName = 'proto.css.chat.ChatMessageRemoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.MessageRemoveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.MessageRemoveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.MessageRemoveResponse.displayName = 'proto.css.chat.MessageRemoveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SyncSendGUIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SyncSendGUIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SyncSendGUIDRequest.displayName = 'proto.css.chat.SyncSendGUIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SyncSendGUIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SyncSendGUIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SyncSendGUIDResponse.displayName = 'proto.css.chat.SyncSendGUIDResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.FAQListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.FAQListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.FAQListReq.displayName = 'proto.css.chat.FAQListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.FAQListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.css.chat.FAQListResp.repeatedFields_, null);
};
goog.inherits(proto.css.chat.FAQListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.FAQListResp.displayName = 'proto.css.chat.FAQListResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.FAQListItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.FAQListItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.FAQListItem.displayName = 'proto.css.chat.FAQListItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CustomerServiceReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CustomerServiceReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CustomerServiceReq.displayName = 'proto.css.chat.CustomerServiceReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CustomerServiceResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CustomerServiceResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CustomerServiceResp.displayName = 'proto.css.chat.CustomerServiceResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SetServiceStatusReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SetServiceStatusReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SetServiceStatusReq.displayName = 'proto.css.chat.SetServiceStatusReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SetServiceStatusResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SetServiceStatusResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SetServiceStatusResp.displayName = 'proto.css.chat.SetServiceStatusResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CSStopServiceReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CSStopServiceReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CSStopServiceReq.displayName = 'proto.css.chat.CSStopServiceReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CSStopServiceResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CSStopServiceResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CSStopServiceResp.displayName = 'proto.css.chat.CSStopServiceResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.displayName = 'proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.displayName = 'proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.PullUserToBlackListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.PullUserToBlackListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.PullUserToBlackListReq.displayName = 'proto.css.chat.PullUserToBlackListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.PullUserToBlackListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.PullUserToBlackListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.PullUserToBlackListResp.displayName = 'proto.css.chat.PullUserToBlackListResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.PullUserOutOfBlackListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.PullUserOutOfBlackListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.PullUserOutOfBlackListReq.displayName = 'proto.css.chat.PullUserOutOfBlackListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.PullUserOutOfBlackListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.PullUserOutOfBlackListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.PullUserOutOfBlackListResp.displayName = 'proto.css.chat.PullUserOutOfBlackListResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SubmitEvaluationReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SubmitEvaluationReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SubmitEvaluationReq.displayName = 'proto.css.chat.SubmitEvaluationReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SubmitEvaluationResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SubmitEvaluationResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SubmitEvaluationResp.displayName = 'proto.css.chat.SubmitEvaluationResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CustomerServiceSignInReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CustomerServiceSignInReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CustomerServiceSignInReq.displayName = 'proto.css.chat.CustomerServiceSignInReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CustomerServiceSignInResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CustomerServiceSignInResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CustomerServiceSignInResp.displayName = 'proto.css.chat.CustomerServiceSignInResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CustomerServiceSignOutReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CustomerServiceSignOutReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CustomerServiceSignOutReq.displayName = 'proto.css.chat.CustomerServiceSignOutReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CustomerServiceSingOutResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CustomerServiceSingOutResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CustomerServiceSingOutResp.displayName = 'proto.css.chat.CustomerServiceSingOutResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.GetSessionWithPageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.GetSessionWithPageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.GetSessionWithPageReq.displayName = 'proto.css.chat.GetSessionWithPageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.GetSessionWithPageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.css.chat.GetSessionWithPageResp.repeatedFields_, null);
};
goog.inherits(proto.css.chat.GetSessionWithPageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.GetSessionWithPageResp.displayName = 'proto.css.chat.GetSessionWithPageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.SessionItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.SessionItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.SessionItem.displayName = 'proto.css.chat.SessionItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.GetBlackListByQueryWithPageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.GetBlackListByQueryWithPageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.GetBlackListByQueryWithPageReq.displayName = 'proto.css.chat.GetBlackListByQueryWithPageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.GetBlackListByQueryWithPageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.css.chat.GetBlackListByQueryWithPageResp.repeatedFields_, null);
};
goog.inherits(proto.css.chat.GetBlackListByQueryWithPageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.GetBlackListByQueryWithPageResp.displayName = 'proto.css.chat.GetBlackListByQueryWithPageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CheckBundleExistsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CheckBundleExistsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CheckBundleExistsReq.displayName = 'proto.css.chat.CheckBundleExistsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CheckBundleExistsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CheckBundleExistsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CheckBundleExistsResp.displayName = 'proto.css.chat.CheckBundleExistsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CheckBundleOverdueReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CheckBundleOverdueReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CheckBundleOverdueReq.displayName = 'proto.css.chat.CheckBundleOverdueReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.css.chat.CheckBundleOverdueResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.css.chat.CheckBundleOverdueResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.css.chat.CheckBundleOverdueResp.displayName = 'proto.css.chat.CheckBundleOverdueResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.ChatMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.ChatMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.ChatMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUsername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fromNick: jspb.Message.getFieldWithDefault(msg, 3, ""),
    toUsername: jspb.Message.getFieldWithDefault(msg, 4, ""),
    msgContentType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    msgId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    burnAfterRead: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    fromClientType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    isJimao: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.ChatMessageRequest}
 */
proto.css.chat.ChatMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.ChatMessageRequest;
  return proto.css.chat.ChatMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.ChatMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.ChatMessageRequest}
 */
proto.css.chat.ChatMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromNick(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    case 5:
      var value = /** @type {!proto.css.msg.EMsgContentType} */ (reader.readEnum());
      msg.setMsgContentType(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgId(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBurnAfterRead(value);
      break;
    case 9:
      var value = /** @type {!proto.css.enum.EClientType} */ (reader.readEnum());
      msg.setFromClientType(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJimao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.ChatMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.ChatMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromNick();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMsgContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMsgId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBurnAfterRead();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getFromClientType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getIsJimao();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string from_username = 1;
 * @return {string}
 */
proto.css.chat.ChatMessageRequest.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRequest.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string appkey = 2;
 * @return {string}
 */
proto.css.chat.ChatMessageRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string from_nick = 3;
 * @return {string}
 */
proto.css.chat.ChatMessageRequest.prototype.getFromNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRequest.prototype.setFromNick = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string to_username = 4;
 * @return {string}
 */
proto.css.chat.ChatMessageRequest.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRequest.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional css.msg.EMsgContentType msg_content_type = 5;
 * @return {!proto.css.msg.EMsgContentType}
 */
proto.css.chat.ChatMessageRequest.prototype.getMsgContentType = function() {
  return /** @type {!proto.css.msg.EMsgContentType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.css.msg.EMsgContentType} value */
proto.css.chat.ChatMessageRequest.prototype.setMsgContentType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.css.chat.ChatMessageRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.css.chat.ChatMessageRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessageRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.css.chat.ChatMessageRequest.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string msg_id = 7;
 * @return {string}
 */
proto.css.chat.ChatMessageRequest.prototype.getMsgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRequest.prototype.setMsgId = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool burn_after_read = 8;
 * @return {boolean}
 */
proto.css.chat.ChatMessageRequest.prototype.getBurnAfterRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.css.chat.ChatMessageRequest.prototype.setBurnAfterRead = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional css.enum.EClientType from_client_type = 9;
 * @return {!proto.css.enum.EClientType}
 */
proto.css.chat.ChatMessageRequest.prototype.getFromClientType = function() {
  return /** @type {!proto.css.enum.EClientType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.css.enum.EClientType} value */
proto.css.chat.ChatMessageRequest.prototype.setFromClientType = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional bool is_jimao = 10;
 * @return {boolean}
 */
proto.css.chat.ChatMessageRequest.prototype.getIsJimao = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.css.chat.ChatMessageRequest.prototype.setIsJimao = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.ChatMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.ChatMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.ChatMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    guid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msgId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    jimaoLeftNum: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.ChatMessageResponse}
 */
proto.css.chat.ChatMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.ChatMessageResponse;
  return proto.css.chat.ChatMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.ChatMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.ChatMessageResponse}
 */
proto.css.chat.ChatMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJimaoLeftNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.ChatMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.ChatMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMsgId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getJimaoLeftNum();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.ChatMessageResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.ChatMessageResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 guid = 2;
 * @return {number}
 */
proto.css.chat.ChatMessageResponse.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.ChatMessageResponse.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string msg_id = 3;
 * @return {string}
 */
proto.css.chat.ChatMessageResponse.prototype.getMsgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageResponse.prototype.setMsgId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string jimao_left_num = 4;
 * @return {string}
 */
proto.css.chat.ChatMessageResponse.prototype.getJimaoLeftNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageResponse.prototype.setJimaoLeftNum = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUsername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fromNick: jspb.Message.getFieldWithDefault(msg, 3, ""),
    msgContentType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    data: msg.getData_asB64(),
    guid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    msgId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    burnAfterRead: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    toUsername: jspb.Message.getFieldWithDefault(msg, 9, ""),
    isJimao: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.ChatMessage}
 */
proto.css.chat.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.ChatMessage;
  return proto.css.chat.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.ChatMessage}
 */
proto.css.chat.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromNick(value);
      break;
    case 4:
      var value = /** @type {!proto.css.msg.EMsgContentType} */ (reader.readEnum());
      msg.setMsgContentType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgId(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBurnAfterRead(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJimao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromNick();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMsgContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMsgId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBurnAfterRead();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIsJimao();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string from_username = 1;
 * @return {string}
 */
proto.css.chat.ChatMessage.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessage.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string appkey = 2;
 * @return {string}
 */
proto.css.chat.ChatMessage.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessage.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string from_nick = 3;
 * @return {string}
 */
proto.css.chat.ChatMessage.prototype.getFromNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessage.prototype.setFromNick = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional css.msg.EMsgContentType msg_content_type = 4;
 * @return {!proto.css.msg.EMsgContentType}
 */
proto.css.chat.ChatMessage.prototype.getMsgContentType = function() {
  return /** @type {!proto.css.msg.EMsgContentType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.css.msg.EMsgContentType} value */
proto.css.chat.ChatMessage.prototype.setMsgContentType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.css.chat.ChatMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.css.chat.ChatMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.css.chat.ChatMessage.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 guid = 6;
 * @return {number}
 */
proto.css.chat.ChatMessage.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.css.chat.ChatMessage.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string msg_id = 7;
 * @return {string}
 */
proto.css.chat.ChatMessage.prototype.getMsgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessage.prototype.setMsgId = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool burn_after_read = 8;
 * @return {boolean}
 */
proto.css.chat.ChatMessage.prototype.getBurnAfterRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.css.chat.ChatMessage.prototype.setBurnAfterRead = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string to_username = 9;
 * @return {string}
 */
proto.css.chat.ChatMessage.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessage.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool is_jimao = 10;
 * @return {boolean}
 */
proto.css.chat.ChatMessage.prototype.getIsJimao = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.css.chat.ChatMessage.prototype.setIsJimao = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.css.chat.SendPointMessageReq.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SendPointMessageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SendPointMessageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SendPointMessageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SendPointMessageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    pushType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pushTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msgList: jspb.Message.toObjectList(msg.getMsgList(),
    common_base_pb.I18nmsg.toObject, includeInstance),
    bizCode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    deviceType: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SendPointMessageReq}
 */
proto.css.chat.SendPointMessageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SendPointMessageReq;
  return proto.css.chat.SendPointMessageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SendPointMessageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SendPointMessageReq}
 */
proto.css.chat.SendPointMessageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setUserIdList(value);
      break;
    case 2:
      var value = /** @type {!proto.common.enum.MsggwEnum.PushType} */ (reader.readEnum());
      msg.setPushType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPushTime(value);
      break;
    case 4:
      var value = new common_base_pb.I18nmsg;
      reader.readMessage(value,common_base_pb.I18nmsg.deserializeBinaryFromReader);
      msg.addMsg(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBizCode(value);
      break;
    case 6:
      var value = /** @type {!proto.common.enum.MsggwEnum.DeviceType} */ (reader.readEnum());
      msg.setDeviceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SendPointMessageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SendPointMessageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SendPointMessageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SendPointMessageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getPushType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPushTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_base_pb.I18nmsg.serializeBinaryToWriter
    );
  }
  f = message.getBizCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDeviceType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * repeated int64 user_id = 1;
 * @return {!Array<number>}
 */
proto.css.chat.SendPointMessageReq.prototype.getUserIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.css.chat.SendPointMessageReq.prototype.setUserIdList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.css.chat.SendPointMessageReq.prototype.addUserId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.SendPointMessageReq.prototype.clearUserIdList = function() {
  this.setUserIdList([]);
};


/**
 * optional common.enum.MsggwEnum.PushType push_type = 2;
 * @return {!proto.common.enum.MsggwEnum.PushType}
 */
proto.css.chat.SendPointMessageReq.prototype.getPushType = function() {
  return /** @type {!proto.common.enum.MsggwEnum.PushType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.common.enum.MsggwEnum.PushType} value */
proto.css.chat.SendPointMessageReq.prototype.setPushType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 push_time = 3;
 * @return {number}
 */
proto.css.chat.SendPointMessageReq.prototype.getPushTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.css.chat.SendPointMessageReq.prototype.setPushTime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated common.base.I18nmsg msg = 4;
 * @return {!Array<!proto.common.base.I18nmsg>}
 */
proto.css.chat.SendPointMessageReq.prototype.getMsgList = function() {
  return /** @type{!Array<!proto.common.base.I18nmsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_base_pb.I18nmsg, 4));
};


/** @param {!Array<!proto.common.base.I18nmsg>} value */
proto.css.chat.SendPointMessageReq.prototype.setMsgList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.common.base.I18nmsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.base.I18nmsg}
 */
proto.css.chat.SendPointMessageReq.prototype.addMsg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.common.base.I18nmsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.SendPointMessageReq.prototype.clearMsgList = function() {
  this.setMsgList([]);
};


/**
 * optional string biz_code = 5;
 * @return {string}
 */
proto.css.chat.SendPointMessageReq.prototype.getBizCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.css.chat.SendPointMessageReq.prototype.setBizCode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional common.enum.MsggwEnum.DeviceType device_type = 6;
 * @return {!proto.common.enum.MsggwEnum.DeviceType}
 */
proto.css.chat.SendPointMessageReq.prototype.getDeviceType = function() {
  return /** @type {!proto.common.enum.MsggwEnum.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.common.enum.MsggwEnum.DeviceType} value */
proto.css.chat.SendPointMessageReq.prototype.setDeviceType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SendPointMessageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SendPointMessageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SendPointMessageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SendPointMessageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SendPointMessageResp}
 */
proto.css.chat.SendPointMessageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SendPointMessageResp;
  return proto.css.chat.SendPointMessageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SendPointMessageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SendPointMessageResp}
 */
proto.css.chat.SendPointMessageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SendPointMessageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SendPointMessageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SendPointMessageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SendPointMessageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.SendPointMessageResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.SendPointMessageResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.PrivateMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.PrivateMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.PrivateMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PrivateMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUsername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fromNick: jspb.Message.getFieldWithDefault(msg, 3, ""),
    toUsername: jspb.Message.getFieldWithDefault(msg, 4, ""),
    msgContentType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    msgId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    burnAfterRead: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    fromClientType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    isJimao: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.PrivateMessageRequest}
 */
proto.css.chat.PrivateMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.PrivateMessageRequest;
  return proto.css.chat.PrivateMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.PrivateMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.PrivateMessageRequest}
 */
proto.css.chat.PrivateMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromNick(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    case 5:
      var value = /** @type {!proto.css.msg.EMsgContentType} */ (reader.readEnum());
      msg.setMsgContentType(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgId(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBurnAfterRead(value);
      break;
    case 9:
      var value = /** @type {!proto.css.enum.EClientType} */ (reader.readEnum());
      msg.setFromClientType(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJimao(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.PrivateMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.PrivateMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.PrivateMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PrivateMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromNick();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMsgContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMsgId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBurnAfterRead();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getFromClientType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getIsJimao();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string from_username = 1;
 * @return {string}
 */
proto.css.chat.PrivateMessageRequest.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.PrivateMessageRequest.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string appkey = 2;
 * @return {string}
 */
proto.css.chat.PrivateMessageRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.PrivateMessageRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string from_nick = 3;
 * @return {string}
 */
proto.css.chat.PrivateMessageRequest.prototype.getFromNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.PrivateMessageRequest.prototype.setFromNick = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string to_username = 4;
 * @return {string}
 */
proto.css.chat.PrivateMessageRequest.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.chat.PrivateMessageRequest.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional css.msg.EMsgContentType msg_content_type = 5;
 * @return {!proto.css.msg.EMsgContentType}
 */
proto.css.chat.PrivateMessageRequest.prototype.getMsgContentType = function() {
  return /** @type {!proto.css.msg.EMsgContentType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.css.msg.EMsgContentType} value */
proto.css.chat.PrivateMessageRequest.prototype.setMsgContentType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.css.chat.PrivateMessageRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.css.chat.PrivateMessageRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.css.chat.PrivateMessageRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.css.chat.PrivateMessageRequest.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string msg_id = 7;
 * @return {string}
 */
proto.css.chat.PrivateMessageRequest.prototype.getMsgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.css.chat.PrivateMessageRequest.prototype.setMsgId = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool burn_after_read = 8;
 * @return {boolean}
 */
proto.css.chat.PrivateMessageRequest.prototype.getBurnAfterRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.css.chat.PrivateMessageRequest.prototype.setBurnAfterRead = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional css.enum.EClientType from_client_type = 9;
 * @return {!proto.css.enum.EClientType}
 */
proto.css.chat.PrivateMessageRequest.prototype.getFromClientType = function() {
  return /** @type {!proto.css.enum.EClientType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.css.enum.EClientType} value */
proto.css.chat.PrivateMessageRequest.prototype.setFromClientType = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional bool is_jimao = 10;
 * @return {boolean}
 */
proto.css.chat.PrivateMessageRequest.prototype.getIsJimao = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.css.chat.PrivateMessageRequest.prototype.setIsJimao = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.ChatMessageStoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.ChatMessageStoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageStoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    unit: (f = msg.getUnit()) && css_msg_pb.MessageUnit.toObject(includeInstance, f),
    guid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    appkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fromUsername: jspb.Message.getFieldWithDefault(msg, 4, ""),
    toUsername: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    retractGuid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    receivedGuid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.ChatMessageStoreRequest}
 */
proto.css.chat.ChatMessageStoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.ChatMessageStoreRequest;
  return proto.css.chat.ChatMessageStoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.ChatMessageStoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.ChatMessageStoreRequest}
 */
proto.css.chat.ChatMessageStoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new css_msg_pb.MessageUnit;
      reader.readMessage(value,css_msg_pb.MessageUnit.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    case 6:
      var value = /** @type {!proto.css.chat.CType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRetractGuid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReceivedGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.ChatMessageStoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.ChatMessageStoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageStoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      css_msg_pb.MessageUnit.serializeBinaryToWriter
    );
  }
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getRetractGuid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getReceivedGuid();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional css.msg.MessageUnit unit = 1;
 * @return {?proto.css.msg.MessageUnit}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getUnit = function() {
  return /** @type{?proto.css.msg.MessageUnit} */ (
    jspb.Message.getWrapperField(this, css_msg_pb.MessageUnit, 1));
};


/** @param {?proto.css.msg.MessageUnit|undefined} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.css.chat.ChatMessageStoreRequest.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 guid = 2;
 * @return {number}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string appkey = 3;
 * @return {string}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from_username = 4;
 * @return {string}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string to_username = 5;
 * @return {string}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional CType type = 6;
 * @return {!proto.css.chat.CType}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getType = function() {
  return /** @type {!proto.css.chat.CType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.css.chat.CType} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 retract_guid = 7;
 * @return {number}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getRetractGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setRetractGuid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 received_guid = 8;
 * @return {number}
 */
proto.css.chat.ChatMessageStoreRequest.prototype.getReceivedGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.css.chat.ChatMessageStoreRequest.prototype.setReceivedGuid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.ChatMessageStoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.ChatMessageStoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.ChatMessageStoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageStoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newestGuid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.ChatMessageStoreResponse}
 */
proto.css.chat.ChatMessageStoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.ChatMessageStoreResponse;
  return proto.css.chat.ChatMessageStoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.ChatMessageStoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.ChatMessageStoreResponse}
 */
proto.css.chat.ChatMessageStoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewestGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessageStoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.ChatMessageStoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.ChatMessageStoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageStoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNewestGuid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.ChatMessageStoreResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.ChatMessageStoreResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 newest_guid = 2;
 * @return {number}
 */
proto.css.chat.ChatMessageStoreResponse.prototype.getNewestGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.ChatMessageStoreResponse.prototype.setNewestGuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.ChatHistoryMessageGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.ChatHistoryMessageGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatHistoryMessageGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUsername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toUsername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beginGuid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    appkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.ChatHistoryMessageGetRequest}
 */
proto.css.chat.ChatHistoryMessageGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.ChatHistoryMessageGetRequest;
  return proto.css.chat.ChatHistoryMessageGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.ChatHistoryMessageGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.ChatHistoryMessageGetRequest}
 */
proto.css.chat.ChatHistoryMessageGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBeginGuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 6:
      var value = /** @type {!proto.css.chat.END_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.ChatHistoryMessageGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.ChatHistoryMessageGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatHistoryMessageGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeginGuid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string from_username = 1;
 * @return {string}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_username = 2;
 * @return {string}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 begin_guid = 3;
 * @return {number}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.getBeginGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.setBeginGuid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string appkey = 5;
 * @return {string}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional END_TYPE type = 6;
 * @return {!proto.css.chat.END_TYPE}
 */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.getType = function() {
  return /** @type {!proto.css.chat.END_TYPE} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.css.chat.END_TYPE} value */
proto.css.chat.ChatHistoryMessageGetRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.GetHistoryCustomMsgBatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.GetHistoryCustomMsgBatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUsername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toUsername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beginGuid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    appkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.GetHistoryCustomMsgBatchRequest}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.GetHistoryCustomMsgBatchRequest;
  return proto.css.chat.GetHistoryCustomMsgBatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.GetHistoryCustomMsgBatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.GetHistoryCustomMsgBatchRequest}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBeginGuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 6:
      var value = /** @type {!proto.css.chat.END_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.GetHistoryCustomMsgBatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.GetHistoryCustomMsgBatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeginGuid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string from_username = 1;
 * @return {string}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_username = 2;
 * @return {string}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 begin_guid = 3;
 * @return {number}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.getBeginGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.setBeginGuid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string appkey = 5;
 * @return {string}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional END_TYPE type = 6;
 * @return {!proto.css.chat.END_TYPE}
 */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.getType = function() {
  return /** @type {!proto.css.chat.END_TYPE} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.css.chat.END_TYPE} value */
proto.css.chat.GetHistoryCustomMsgBatchRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.GetHistoryCustomMsgBatchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.GetHistoryCustomMsgBatchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    css_msg_pb.CustomSystemMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.GetHistoryCustomMsgBatchResponse}
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.GetHistoryCustomMsgBatchResponse;
  return proto.css.chat.GetHistoryCustomMsgBatchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.GetHistoryCustomMsgBatchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.GetHistoryCustomMsgBatchResponse}
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = new css_msg_pb.CustomSystemMessage;
      reader.readMessage(value,css_msg_pb.CustomSystemMessage.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.GetHistoryCustomMsgBatchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.GetHistoryCustomMsgBatchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      css_msg_pb.CustomSystemMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated css.msg.CustomSystemMessage data = 2;
 * @return {!Array<!proto.css.msg.CustomSystemMessage>}
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.css.msg.CustomSystemMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, css_msg_pb.CustomSystemMessage, 2));
};


/** @param {!Array<!proto.css.msg.CustomSystemMessage>} value */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.css.msg.CustomSystemMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.css.msg.CustomSystemMessage}
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.css.msg.CustomSystemMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.GetHistoryCustomMsgBatchResponse.prototype.clearDataList = function() {
  this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SingleGetHistoryCustomMsgRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SingleGetHistoryCustomMsgRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SingleGetHistoryCustomMsgRequest}
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SingleGetHistoryCustomMsgRequest;
  return proto.css.chat.SingleGetHistoryCustomMsgRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SingleGetHistoryCustomMsgRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SingleGetHistoryCustomMsgRequest}
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SingleGetHistoryCustomMsgRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SingleGetHistoryCustomMsgRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 guid = 1;
 * @return {number}
 */
proto.css.chat.SingleGetHistoryCustomMsgRequest.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.css.chat.SingleGetHistoryCustomMsgRequest.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SingleGetHistoryCustomMsgResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SingleGetHistoryCustomMsgResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: (f = msg.getData()) && css_msg_pb.CustomSystemMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SingleGetHistoryCustomMsgResponse}
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SingleGetHistoryCustomMsgResponse;
  return proto.css.chat.SingleGetHistoryCustomMsgResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SingleGetHistoryCustomMsgResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SingleGetHistoryCustomMsgResponse}
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = new css_msg_pb.CustomSystemMessage;
      reader.readMessage(value,css_msg_pb.CustomSystemMessage.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SingleGetHistoryCustomMsgResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SingleGetHistoryCustomMsgResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      css_msg_pb.CustomSystemMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional css.msg.CustomSystemMessage data = 2;
 * @return {?proto.css.msg.CustomSystemMessage}
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.getData = function() {
  return /** @type{?proto.css.msg.CustomSystemMessage} */ (
    jspb.Message.getWrapperField(this, css_msg_pb.CustomSystemMessage, 2));
};


/** @param {?proto.css.msg.CustomSystemMessage|undefined} value */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.css.chat.SingleGetHistoryCustomMsgResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.MessageSyncRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.MessageSyncRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.MessageSyncRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.MessageSyncRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sor: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.MessageSyncRequest}
 */
proto.css.chat.MessageSyncRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.MessageSyncRequest;
  return proto.css.chat.MessageSyncRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.MessageSyncRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.MessageSyncRequest}
 */
proto.css.chat.MessageSyncRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSor(value);
      break;
    case 5:
      var value = /** @type {!proto.css.chat.END_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.MessageSyncRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.MessageSyncRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.MessageSyncRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.MessageSyncRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSor();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint64 guid = 1;
 * @return {number}
 */
proto.css.chat.MessageSyncRequest.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.css.chat.MessageSyncRequest.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.css.chat.MessageSyncRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.MessageSyncRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string appkey = 3;
 * @return {string}
 */
proto.css.chat.MessageSyncRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.MessageSyncRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool sor = 4;
 * @return {boolean}
 */
proto.css.chat.MessageSyncRequest.prototype.getSor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.css.chat.MessageSyncRequest.prototype.setSor = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional END_TYPE type = 5;
 * @return {!proto.css.chat.END_TYPE}
 */
proto.css.chat.MessageSyncRequest.prototype.getType = function() {
  return /** @type {!proto.css.chat.END_TYPE} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.css.chat.END_TYPE} value */
proto.css.chat.MessageSyncRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.css.chat.MsgGetResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.MsgGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.MsgGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.MsgGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.MsgGetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    css_msg_pb.MessageUnit.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.MsgGetResponse}
 */
proto.css.chat.MsgGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.MsgGetResponse;
  return proto.css.chat.MsgGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.MsgGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.MsgGetResponse}
 */
proto.css.chat.MsgGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = new css_msg_pb.MessageUnit;
      reader.readMessage(value,css_msg_pb.MessageUnit.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.MsgGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.MsgGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.MsgGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.MsgGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      css_msg_pb.MessageUnit.serializeBinaryToWriter
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.MsgGetResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.MsgGetResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated css.msg.MessageUnit data = 2;
 * @return {!Array<!proto.css.msg.MessageUnit>}
 */
proto.css.chat.MsgGetResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.css.msg.MessageUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, css_msg_pb.MessageUnit, 2));
};


/** @param {!Array<!proto.css.msg.MessageUnit>} value */
proto.css.chat.MsgGetResponse.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.css.msg.MessageUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.css.msg.MessageUnit}
 */
proto.css.chat.MsgGetResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.css.msg.MessageUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.MsgGetResponse.prototype.clearDataList = function() {
  this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SyncChatSessionReadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SyncChatSessionReadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SyncChatSessionReadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncChatSessionReadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromUsername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    toUsername: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SyncChatSessionReadRequest}
 */
proto.css.chat.SyncChatSessionReadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SyncChatSessionReadRequest;
  return proto.css.chat.SyncChatSessionReadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SyncChatSessionReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SyncChatSessionReadRequest}
 */
proto.css.chat.SyncChatSessionReadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SyncChatSessionReadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SyncChatSessionReadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SyncChatSessionReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncChatSessionReadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string appkey = 1;
 * @return {string}
 */
proto.css.chat.SyncChatSessionReadRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.SyncChatSessionReadRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string from_username = 2;
 * @return {string}
 */
proto.css.chat.SyncChatSessionReadRequest.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.SyncChatSessionReadRequest.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to_username = 3;
 * @return {string}
 */
proto.css.chat.SyncChatSessionReadRequest.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.SyncChatSessionReadRequest.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SyncChatSessionReadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SyncChatSessionReadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SyncChatSessionReadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncChatSessionReadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    readGuid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SyncChatSessionReadResponse}
 */
proto.css.chat.SyncChatSessionReadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SyncChatSessionReadResponse;
  return proto.css.chat.SyncChatSessionReadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SyncChatSessionReadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SyncChatSessionReadResponse}
 */
proto.css.chat.SyncChatSessionReadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SyncChatSessionReadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SyncChatSessionReadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SyncChatSessionReadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncChatSessionReadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getReadGuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.SyncChatSessionReadResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.SyncChatSessionReadResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 read_guid = 2;
 * @return {number}
 */
proto.css.chat.SyncChatSessionReadResponse.prototype.getReadGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.SyncChatSessionReadResponse.prototype.setReadGuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.css.chat.ChatMessageRemoveRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.ChatMessageRemoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.ChatMessageRemoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageRemoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromUsername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    toUsername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    guidList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    removeSession: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.ChatMessageRemoveRequest}
 */
proto.css.chat.ChatMessageRemoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.ChatMessageRemoveRequest;
  return proto.css.chat.ChatMessageRemoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.ChatMessageRemoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.ChatMessageRemoveRequest}
 */
proto.css.chat.ChatMessageRemoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUsername(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setGuidList(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.ChatMessageRemoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.ChatMessageRemoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.ChatMessageRemoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGuidList();
  if (f.length > 0) {
    writer.writePackedUint64(
      4,
      f
    );
  }
  f = message.getRemoveSession();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string appkey = 1;
 * @return {string}
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRemoveRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string from_username = 2;
 * @return {string}
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.getFromUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRemoveRequest.prototype.setFromUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to_username = 3;
 * @return {string}
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.getToUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.ChatMessageRemoveRequest.prototype.setToUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated uint64 guid = 4;
 * @return {!Array<number>}
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.getGuidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<number>} value */
proto.css.chat.ChatMessageRemoveRequest.prototype.setGuidList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.addGuid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.clearGuidList = function() {
  this.setGuidList([]);
};


/**
 * optional bool remove_session = 5;
 * @return {boolean}
 */
proto.css.chat.ChatMessageRemoveRequest.prototype.getRemoveSession = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.css.chat.ChatMessageRemoveRequest.prototype.setRemoveSession = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.MessageRemoveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.MessageRemoveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.MessageRemoveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.MessageRemoveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.MessageRemoveResponse}
 */
proto.css.chat.MessageRemoveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.MessageRemoveResponse;
  return proto.css.chat.MessageRemoveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.MessageRemoveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.MessageRemoveResponse}
 */
proto.css.chat.MessageRemoveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.MessageRemoveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.MessageRemoveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.MessageRemoveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.MessageRemoveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.MessageRemoveResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.MessageRemoveResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SyncSendGUIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SyncSendGUIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SyncSendGUIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncSendGUIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appkey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SyncSendGUIDRequest}
 */
proto.css.chat.SyncSendGUIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SyncSendGUIDRequest;
  return proto.css.chat.SyncSendGUIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SyncSendGUIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SyncSendGUIDRequest}
 */
proto.css.chat.SyncSendGUIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SyncSendGUIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SyncSendGUIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SyncSendGUIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncSendGUIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.css.chat.SyncSendGUIDRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.SyncSendGUIDRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string appkey = 2;
 * @return {string}
 */
proto.css.chat.SyncSendGUIDRequest.prototype.getAppkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.SyncSendGUIDRequest.prototype.setAppkey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SyncSendGUIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SyncSendGUIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SyncSendGUIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncSendGUIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sendGuid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SyncSendGUIDResponse}
 */
proto.css.chat.SyncSendGUIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SyncSendGUIDResponse;
  return proto.css.chat.SyncSendGUIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SyncSendGUIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SyncSendGUIDResponse}
 */
proto.css.chat.SyncSendGUIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSendGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SyncSendGUIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SyncSendGUIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SyncSendGUIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SyncSendGUIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSendGuid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.SyncSendGUIDResponse.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.SyncSendGUIDResponse.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 send_guid = 2;
 * @return {number}
 */
proto.css.chat.SyncSendGUIDResponse.prototype.getSendGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.SyncSendGUIDResponse.prototype.setSendGuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.FAQListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.FAQListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.FAQListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.FAQListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faqId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    input: jspb.Message.getFieldWithDefault(msg, 3, ""),
    language: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.FAQListReq}
 */
proto.css.chat.FAQListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.FAQListReq;
  return proto.css.chat.FAQListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.FAQListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.FAQListReq}
 */
proto.css.chat.FAQListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaqId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.FAQListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.FAQListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.FAQListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.FAQListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaqId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.FAQListReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.FAQListReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string faq_id = 2;
 * @return {string}
 */
proto.css.chat.FAQListReq.prototype.getFaqId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.FAQListReq.prototype.setFaqId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string input = 3;
 * @return {string}
 */
proto.css.chat.FAQListReq.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.FAQListReq.prototype.setInput = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string language = 4;
 * @return {string}
 */
proto.css.chat.FAQListReq.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.chat.FAQListReq.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.css.chat.FAQListResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.FAQListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.FAQListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.FAQListResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.FAQListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    faqType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.css.chat.FAQListItem.toObject, includeInstance),
    mainTitle: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.FAQListResp}
 */
proto.css.chat.FAQListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.FAQListResp;
  return proto.css.chat.FAQListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.FAQListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.FAQListResp}
 */
proto.css.chat.FAQListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFaqType(value);
      break;
    case 3:
      var value = new proto.css.chat.FAQListItem;
      reader.readMessage(value,proto.css.chat.FAQListItem.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.FAQListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.FAQListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.FAQListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.FAQListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFaqType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.css.chat.FAQListItem.serializeBinaryToWriter
    );
  }
  f = message.getMainTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.FAQListResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.FAQListResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 faq_type = 2;
 * @return {number}
 */
proto.css.chat.FAQListResp.prototype.getFaqType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.FAQListResp.prototype.setFaqType = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FAQListItem data = 3;
 * @return {!Array<!proto.css.chat.FAQListItem>}
 */
proto.css.chat.FAQListResp.prototype.getDataList = function() {
  return /** @type{!Array<!proto.css.chat.FAQListItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.css.chat.FAQListItem, 3));
};


/** @param {!Array<!proto.css.chat.FAQListItem>} value */
proto.css.chat.FAQListResp.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.css.chat.FAQListItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.css.chat.FAQListItem}
 */
proto.css.chat.FAQListResp.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.css.chat.FAQListItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.FAQListResp.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * optional string main_title = 4;
 * @return {string}
 */
proto.css.chat.FAQListResp.prototype.getMainTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.chat.FAQListResp.prototype.setMainTitle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.FAQListItem.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.FAQListItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.FAQListItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.FAQListItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    faqId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faqTitle: jspb.Message.getFieldWithDefault(msg, 2, ""),
    faqDesc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    imgUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    video: jspb.Message.getFieldWithDefault(msg, 6, ""),
    videoCover: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.FAQListItem}
 */
proto.css.chat.FAQListItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.FAQListItem;
  return proto.css.chat.FAQListItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.FAQListItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.FAQListItem}
 */
proto.css.chat.FAQListItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaqId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaqTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaqDesc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideoCover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.FAQListItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.FAQListItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.FAQListItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.FAQListItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaqId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaqTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFaqDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getImgUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVideo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVideoCover();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string faq_id = 1;
 * @return {string}
 */
proto.css.chat.FAQListItem.prototype.getFaqId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.FAQListItem.prototype.setFaqId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string faq_title = 2;
 * @return {string}
 */
proto.css.chat.FAQListItem.prototype.getFaqTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.FAQListItem.prototype.setFaqTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string faq_desc = 3;
 * @return {string}
 */
proto.css.chat.FAQListItem.prototype.getFaqDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.FAQListItem.prototype.setFaqDesc = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 type = 4;
 * @return {number}
 */
proto.css.chat.FAQListItem.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.css.chat.FAQListItem.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string img_url = 5;
 * @return {string}
 */
proto.css.chat.FAQListItem.prototype.getImgUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.css.chat.FAQListItem.prototype.setImgUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string video = 6;
 * @return {string}
 */
proto.css.chat.FAQListItem.prototype.getVideo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.css.chat.FAQListItem.prototype.setVideo = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string video_cover = 7;
 * @return {string}
 */
proto.css.chat.FAQListItem.prototype.getVideoCover = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.css.chat.FAQListItem.prototype.setVideoCover = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CustomerServiceReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CustomerServiceReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CustomerServiceReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    countryCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    language: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CustomerServiceReq}
 */
proto.css.chat.CustomerServiceReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CustomerServiceReq;
  return proto.css.chat.CustomerServiceReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CustomerServiceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CustomerServiceReq}
 */
proto.css.chat.CustomerServiceReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CustomerServiceReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CustomerServiceReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CustomerServiceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.CustomerServiceReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string country_code = 2;
 * @return {string}
 */
proto.css.chat.CustomerServiceReq.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceReq.prototype.setCountryCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string language = 3;
 * @return {string}
 */
proto.css.chat.CustomerServiceReq.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceReq.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CustomerServiceResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CustomerServiceResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CustomerServiceResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    csId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    csName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CustomerServiceResp}
 */
proto.css.chat.CustomerServiceResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CustomerServiceResp;
  return proto.css.chat.CustomerServiceResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CustomerServiceResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CustomerServiceResp}
 */
proto.css.chat.CustomerServiceResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CustomerServiceResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CustomerServiceResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CustomerServiceResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCsName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.CustomerServiceResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.CustomerServiceResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.CustomerServiceResp.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceResp.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cs_name = 3;
 * @return {string}
 */
proto.css.chat.CustomerServiceResp.prototype.getCsName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceResp.prototype.setCsName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SetServiceStatusReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SetServiceStatusReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SetServiceStatusReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetServiceStatusReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    csId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SetServiceStatusReq}
 */
proto.css.chat.SetServiceStatusReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SetServiceStatusReq;
  return proto.css.chat.SetServiceStatusReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SetServiceStatusReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SetServiceStatusReq}
 */
proto.css.chat.SetServiceStatusReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    case 2:
      var value = /** @type {!proto.css.chat.ServiceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SetServiceStatusReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SetServiceStatusReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SetServiceStatusReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetServiceStatusReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string cs_id = 1;
 * @return {string}
 */
proto.css.chat.SetServiceStatusReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.SetServiceStatusReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ServiceStatus status = 2;
 * @return {!proto.css.chat.ServiceStatus}
 */
proto.css.chat.SetServiceStatusReq.prototype.getStatus = function() {
  return /** @type {!proto.css.chat.ServiceStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.css.chat.ServiceStatus} value */
proto.css.chat.SetServiceStatusReq.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SetServiceStatusResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SetServiceStatusResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SetServiceStatusResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetServiceStatusResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SetServiceStatusResp}
 */
proto.css.chat.SetServiceStatusResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SetServiceStatusResp;
  return proto.css.chat.SetServiceStatusResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SetServiceStatusResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SetServiceStatusResp}
 */
proto.css.chat.SetServiceStatusResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SetServiceStatusResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SetServiceStatusResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SetServiceStatusResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetServiceStatusResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.SetServiceStatusResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.SetServiceStatusResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CSStopServiceReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CSStopServiceReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CSStopServiceReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CSStopServiceReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    csId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CSStopServiceReq}
 */
proto.css.chat.CSStopServiceReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CSStopServiceReq;
  return proto.css.chat.CSStopServiceReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CSStopServiceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CSStopServiceReq}
 */
proto.css.chat.CSStopServiceReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CSStopServiceReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CSStopServiceReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CSStopServiceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CSStopServiceReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.CSStopServiceReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.CSStopServiceReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.CSStopServiceReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.CSStopServiceReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CSStopServiceResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CSStopServiceResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CSStopServiceResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CSStopServiceResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CSStopServiceResp}
 */
proto.css.chat.CSStopServiceResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CSStopServiceResp;
  return proto.css.chat.CSStopServiceResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CSStopServiceResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CSStopServiceResp}
 */
proto.css.chat.CSStopServiceResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CSStopServiceResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CSStopServiceResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CSStopServiceResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CSStopServiceResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.CSStopServiceResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.CSStopServiceResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    csId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq;
  return proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp;
  return proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.SetSessionTypeAfterSubmittedWorkOrderResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.PullUserToBlackListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.PullUserToBlackListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.PullUserToBlackListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserToBlackListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    csId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.PullUserToBlackListReq}
 */
proto.css.chat.PullUserToBlackListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.PullUserToBlackListReq;
  return proto.css.chat.PullUserToBlackListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.PullUserToBlackListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.PullUserToBlackListReq}
 */
proto.css.chat.PullUserToBlackListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.PullUserToBlackListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.PullUserToBlackListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.PullUserToBlackListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserToBlackListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.PullUserToBlackListReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.PullUserToBlackListReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.PullUserToBlackListReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.PullUserToBlackListReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.PullUserToBlackListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.PullUserToBlackListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.PullUserToBlackListResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserToBlackListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.PullUserToBlackListResp}
 */
proto.css.chat.PullUserToBlackListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.PullUserToBlackListResp;
  return proto.css.chat.PullUserToBlackListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.PullUserToBlackListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.PullUserToBlackListResp}
 */
proto.css.chat.PullUserToBlackListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.PullUserToBlackListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.PullUserToBlackListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.PullUserToBlackListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserToBlackListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.PullUserToBlackListResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.PullUserToBlackListResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.PullUserOutOfBlackListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.PullUserOutOfBlackListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.PullUserOutOfBlackListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserOutOfBlackListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    csId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.PullUserOutOfBlackListReq}
 */
proto.css.chat.PullUserOutOfBlackListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.PullUserOutOfBlackListReq;
  return proto.css.chat.PullUserOutOfBlackListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.PullUserOutOfBlackListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.PullUserOutOfBlackListReq}
 */
proto.css.chat.PullUserOutOfBlackListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.PullUserOutOfBlackListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.PullUserOutOfBlackListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.PullUserOutOfBlackListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserOutOfBlackListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.PullUserOutOfBlackListReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.PullUserOutOfBlackListReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.PullUserOutOfBlackListReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.PullUserOutOfBlackListReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.PullUserOutOfBlackListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.PullUserOutOfBlackListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.PullUserOutOfBlackListResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserOutOfBlackListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.PullUserOutOfBlackListResp}
 */
proto.css.chat.PullUserOutOfBlackListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.PullUserOutOfBlackListResp;
  return proto.css.chat.PullUserOutOfBlackListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.PullUserOutOfBlackListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.PullUserOutOfBlackListResp}
 */
proto.css.chat.PullUserOutOfBlackListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.PullUserOutOfBlackListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.PullUserOutOfBlackListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.PullUserOutOfBlackListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.PullUserOutOfBlackListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.PullUserOutOfBlackListResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.PullUserOutOfBlackListResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SubmitEvaluationReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SubmitEvaluationReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SubmitEvaluationReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SubmitEvaluationReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    csId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SubmitEvaluationReq}
 */
proto.css.chat.SubmitEvaluationReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SubmitEvaluationReq;
  return proto.css.chat.SubmitEvaluationReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SubmitEvaluationReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SubmitEvaluationReq}
 */
proto.css.chat.SubmitEvaluationReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SubmitEvaluationReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SubmitEvaluationReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SubmitEvaluationReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SubmitEvaluationReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.SubmitEvaluationReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.SubmitEvaluationReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.SubmitEvaluationReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.SubmitEvaluationReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SubmitEvaluationResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SubmitEvaluationResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SubmitEvaluationResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SubmitEvaluationResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SubmitEvaluationResp}
 */
proto.css.chat.SubmitEvaluationResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SubmitEvaluationResp;
  return proto.css.chat.SubmitEvaluationResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SubmitEvaluationResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SubmitEvaluationResp}
 */
proto.css.chat.SubmitEvaluationResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SubmitEvaluationResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SubmitEvaluationResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SubmitEvaluationResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SubmitEvaluationResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.SubmitEvaluationResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.SubmitEvaluationResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CustomerServiceSignInReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CustomerServiceSignInReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CustomerServiceSignInReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSignInReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    csId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    csName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    csMobile: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CustomerServiceSignInReq}
 */
proto.css.chat.CustomerServiceSignInReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CustomerServiceSignInReq;
  return proto.css.chat.CustomerServiceSignInReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CustomerServiceSignInReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CustomerServiceSignInReq}
 */
proto.css.chat.CustomerServiceSignInReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsMobile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CustomerServiceSignInReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CustomerServiceSignInReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CustomerServiceSignInReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSignInReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCsName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCsMobile();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string cs_id = 1;
 * @return {string}
 */
proto.css.chat.CustomerServiceSignInReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceSignInReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cs_name = 2;
 * @return {string}
 */
proto.css.chat.CustomerServiceSignInReq.prototype.getCsName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceSignInReq.prototype.setCsName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cs_mobile = 3;
 * @return {string}
 */
proto.css.chat.CustomerServiceSignInReq.prototype.getCsMobile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceSignInReq.prototype.setCsMobile = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CustomerServiceSignInResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CustomerServiceSignInResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CustomerServiceSignInResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSignInResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    csId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serviceStatus: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CustomerServiceSignInResp}
 */
proto.css.chat.CustomerServiceSignInResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CustomerServiceSignInResp;
  return proto.css.chat.CustomerServiceSignInResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CustomerServiceSignInResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CustomerServiceSignInResp}
 */
proto.css.chat.CustomerServiceSignInResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CustomerServiceSignInResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CustomerServiceSignInResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CustomerServiceSignInResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSignInResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceStatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.CustomerServiceSignInResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.CustomerServiceSignInResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.CustomerServiceSignInResp.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceSignInResp.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 service_status = 3;
 * @return {number}
 */
proto.css.chat.CustomerServiceSignInResp.prototype.getServiceStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.css.chat.CustomerServiceSignInResp.prototype.setServiceStatus = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CustomerServiceSignOutReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CustomerServiceSignOutReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CustomerServiceSignOutReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSignOutReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    csId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CustomerServiceSignOutReq}
 */
proto.css.chat.CustomerServiceSignOutReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CustomerServiceSignOutReq;
  return proto.css.chat.CustomerServiceSignOutReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CustomerServiceSignOutReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CustomerServiceSignOutReq}
 */
proto.css.chat.CustomerServiceSignOutReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CustomerServiceSignOutReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CustomerServiceSignOutReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CustomerServiceSignOutReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSignOutReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cs_id = 1;
 * @return {string}
 */
proto.css.chat.CustomerServiceSignOutReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.CustomerServiceSignOutReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CustomerServiceSingOutResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CustomerServiceSingOutResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CustomerServiceSingOutResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSingOutResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CustomerServiceSingOutResp}
 */
proto.css.chat.CustomerServiceSingOutResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CustomerServiceSingOutResp;
  return proto.css.chat.CustomerServiceSingOutResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CustomerServiceSingOutResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CustomerServiceSingOutResp}
 */
proto.css.chat.CustomerServiceSingOutResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CustomerServiceSingOutResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CustomerServiceSingOutResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CustomerServiceSingOutResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CustomerServiceSingOutResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.CustomerServiceSingOutResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.CustomerServiceSingOutResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.GetSessionWithPageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.GetSessionWithPageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.GetSessionWithPageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetSessionWithPageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    csId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    page: (f = msg.getPage()) && css_base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.GetSessionWithPageReq}
 */
proto.css.chat.GetSessionWithPageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.GetSessionWithPageReq;
  return proto.css.chat.GetSessionWithPageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.GetSessionWithPageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.GetSessionWithPageReq}
 */
proto.css.chat.GetSessionWithPageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    case 2:
      var value = new css_base_pb.Pagination;
      reader.readMessage(value,css_base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.GetSessionWithPageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.GetSessionWithPageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.GetSessionWithPageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetSessionWithPageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      css_base_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cs_id = 1;
 * @return {string}
 */
proto.css.chat.GetSessionWithPageReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.GetSessionWithPageReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional css.base.Pagination page = 2;
 * @return {?proto.css.base.Pagination}
 */
proto.css.chat.GetSessionWithPageReq.prototype.getPage = function() {
  return /** @type{?proto.css.base.Pagination} */ (
    jspb.Message.getWrapperField(this, css_base_pb.Pagination, 2));
};


/** @param {?proto.css.base.Pagination|undefined} value */
proto.css.chat.GetSessionWithPageReq.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.css.chat.GetSessionWithPageReq.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.css.chat.GetSessionWithPageReq.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.css.chat.GetSessionWithPageResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.GetSessionWithPageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.GetSessionWithPageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.GetSessionWithPageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetSessionWithPageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sessionItemList: jspb.Message.toObjectList(msg.getSessionItemList(),
    proto.css.chat.SessionItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.GetSessionWithPageResp}
 */
proto.css.chat.GetSessionWithPageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.GetSessionWithPageResp;
  return proto.css.chat.GetSessionWithPageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.GetSessionWithPageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.GetSessionWithPageResp}
 */
proto.css.chat.GetSessionWithPageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 3:
      var value = new proto.css.chat.SessionItem;
      reader.readMessage(value,proto.css.chat.SessionItem.deserializeBinaryFromReader);
      msg.addSessionItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.GetSessionWithPageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.GetSessionWithPageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.GetSessionWithPageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetSessionWithPageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSessionItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.css.chat.SessionItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.GetSessionWithPageResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.GetSessionWithPageResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 total = 2;
 * @return {number}
 */
proto.css.chat.GetSessionWithPageResp.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.GetSessionWithPageResp.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated SessionItem session_item = 3;
 * @return {!Array<!proto.css.chat.SessionItem>}
 */
proto.css.chat.GetSessionWithPageResp.prototype.getSessionItemList = function() {
  return /** @type{!Array<!proto.css.chat.SessionItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.css.chat.SessionItem, 3));
};


/** @param {!Array<!proto.css.chat.SessionItem>} value */
proto.css.chat.GetSessionWithPageResp.prototype.setSessionItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.css.chat.SessionItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.css.chat.SessionItem}
 */
proto.css.chat.GetSessionWithPageResp.prototype.addSessionItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.css.chat.SessionItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.GetSessionWithPageResp.prototype.clearSessionItemList = function() {
  this.setSessionItemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.SessionItem.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.SessionItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.SessionItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SessionItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headImg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nickName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastChatTime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    messageType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.SessionItem}
 */
proto.css.chat.SessionItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.SessionItem;
  return proto.css.chat.SessionItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.SessionItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.SessionItem}
 */
proto.css.chat.SessionItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadImg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastChatTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.SessionItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.SessionItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.SessionItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.SessionItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeadImg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastChatTime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMessageType();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.SessionItem.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.SessionItem.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string head_img = 2;
 * @return {string}
 */
proto.css.chat.SessionItem.prototype.getHeadImg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.SessionItem.prototype.setHeadImg = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nick_name = 3;
 * @return {string}
 */
proto.css.chat.SessionItem.prototype.getNickName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.SessionItem.prototype.setNickName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string last_chat_time = 4;
 * @return {string}
 */
proto.css.chat.SessionItem.prototype.getLastChatTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.css.chat.SessionItem.prototype.setLastChatTime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 message_type = 5;
 * @return {number}
 */
proto.css.chat.SessionItem.prototype.getMessageType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.css.chat.SessionItem.prototype.setMessageType = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.GetBlackListByQueryWithPageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.GetBlackListByQueryWithPageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetBlackListByQueryWithPageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nickName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createTime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    page: (f = msg.getPage()) && css_base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.GetBlackListByQueryWithPageReq}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.GetBlackListByQueryWithPageReq;
  return proto.css.chat.GetBlackListByQueryWithPageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.GetBlackListByQueryWithPageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.GetBlackListByQueryWithPageReq}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateTime(value);
      break;
    case 4:
      var value = new css_base_pb.Pagination;
      reader.readMessage(value,css_base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.GetBlackListByQueryWithPageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.GetBlackListByQueryWithPageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetBlackListByQueryWithPageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNickName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreateTime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      css_base_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nick_name = 2;
 * @return {string}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.getNickName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.setNickName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string create_time = 3;
 * @return {string}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.getCreateTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.setCreateTime = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional css.base.Pagination page = 4;
 * @return {?proto.css.base.Pagination}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.getPage = function() {
  return /** @type{?proto.css.base.Pagination} */ (
    jspb.Message.getWrapperField(this, css_base_pb.Pagination, 4));
};


/** @param {?proto.css.base.Pagination|undefined} value */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.css.chat.GetBlackListByQueryWithPageReq.prototype.hasPage = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.css.chat.GetBlackListByQueryWithPageResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.GetBlackListByQueryWithPageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.GetBlackListByQueryWithPageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetBlackListByQueryWithPageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    css_base_pb.UserInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.GetBlackListByQueryWithPageResp}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.GetBlackListByQueryWithPageResp;
  return proto.css.chat.GetBlackListByQueryWithPageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.GetBlackListByQueryWithPageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.GetBlackListByQueryWithPageResp}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 3:
      var value = new css_base_pb.UserInfo;
      reader.readMessage(value,css_base_pb.UserInfo.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.GetBlackListByQueryWithPageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.GetBlackListByQueryWithPageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.GetBlackListByQueryWithPageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      css_base_pb.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 total = 2;
 * @return {number}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated css.base.UserInfo data = 3;
 * @return {!Array<!proto.css.base.UserInfo>}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.getDataList = function() {
  return /** @type{!Array<!proto.css.base.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, css_base_pb.UserInfo, 3));
};


/** @param {!Array<!proto.css.base.UserInfo>} value */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.css.base.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.css.base.UserInfo}
 */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.css.base.UserInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.css.chat.GetBlackListByQueryWithPageResp.prototype.clearDataList = function() {
  this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CheckBundleExistsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CheckBundleExistsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CheckBundleExistsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleExistsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CheckBundleExistsReq}
 */
proto.css.chat.CheckBundleExistsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CheckBundleExistsReq;
  return proto.css.chat.CheckBundleExistsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CheckBundleExistsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CheckBundleExistsReq}
 */
proto.css.chat.CheckBundleExistsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CheckBundleExistsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CheckBundleExistsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CheckBundleExistsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleExistsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.CheckBundleExistsReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.CheckBundleExistsReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CheckBundleExistsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CheckBundleExistsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CheckBundleExistsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleExistsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0),
    csId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    csName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CheckBundleExistsResp}
 */
proto.css.chat.CheckBundleExistsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CheckBundleExistsResp;
  return proto.css.chat.CheckBundleExistsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CheckBundleExistsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CheckBundleExistsResp}
 */
proto.css.chat.CheckBundleExistsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CheckBundleExistsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CheckBundleExistsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CheckBundleExistsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleExistsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCsName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.CheckBundleExistsResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.CheckBundleExistsResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.CheckBundleExistsResp.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.CheckBundleExistsResp.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cs_name = 3;
 * @return {string}
 */
proto.css.chat.CheckBundleExistsResp.prototype.getCsName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.css.chat.CheckBundleExistsResp.prototype.setCsName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CheckBundleOverdueReq.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CheckBundleOverdueReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CheckBundleOverdueReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleOverdueReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    csId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CheckBundleOverdueReq}
 */
proto.css.chat.CheckBundleOverdueReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CheckBundleOverdueReq;
  return proto.css.chat.CheckBundleOverdueReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CheckBundleOverdueReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CheckBundleOverdueReq}
 */
proto.css.chat.CheckBundleOverdueReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CheckBundleOverdueReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CheckBundleOverdueReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CheckBundleOverdueReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleOverdueReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.css.chat.CheckBundleOverdueReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.css.chat.CheckBundleOverdueReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cs_id = 2;
 * @return {string}
 */
proto.css.chat.CheckBundleOverdueReq.prototype.getCsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.css.chat.CheckBundleOverdueReq.prototype.setCsId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.css.chat.CheckBundleOverdueResp.prototype.toObject = function(opt_includeInstance) {
  return proto.css.chat.CheckBundleOverdueResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.css.chat.CheckBundleOverdueResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleOverdueResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.css.chat.CheckBundleOverdueResp}
 */
proto.css.chat.CheckBundleOverdueResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.css.chat.CheckBundleOverdueResp;
  return proto.css.chat.CheckBundleOverdueResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.css.chat.CheckBundleOverdueResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.css.chat.CheckBundleOverdueResp}
 */
proto.css.chat.CheckBundleOverdueResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.css.errcode.ErrorCode} */ (reader.readEnum());
      msg.setRet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.css.chat.CheckBundleOverdueResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.css.chat.CheckBundleOverdueResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.css.chat.CheckBundleOverdueResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.css.chat.CheckBundleOverdueResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional css.errcode.ErrorCode ret = 1;
 * @return {!proto.css.errcode.ErrorCode}
 */
proto.css.chat.CheckBundleOverdueResp.prototype.getRet = function() {
  return /** @type {!proto.css.errcode.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.css.errcode.ErrorCode} value */
proto.css.chat.CheckBundleOverdueResp.prototype.setRet = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.css.chat.CType = {
  COMMON: 0,
  RECEIVED: 1,
  RETRACT: 2,
  CUSTOM: 9
};

/**
 * @enum {number}
 */
proto.css.chat.END_TYPE = {
  MOBILE: 0,
  WEB: 1
};

/**
 * @enum {number}
 */
proto.css.chat.ServiceStatus = {
  NULL: 0,
  BUSY: 1,
  AT_REST: 2,
  LEISURE: 3
};

goog.object.extend(exports, proto.css.chat);
